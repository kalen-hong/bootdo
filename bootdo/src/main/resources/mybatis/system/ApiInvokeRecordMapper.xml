<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bootdo.system.dao.ApiInvokeRecordDao">
  <select id="get" resultType="com.bootdo.system.domain.ApiInvokeRecordDO">
		select `id`,`interface_name`,`url`,`remark`,`invoke_time`,`CLIENT_ID`,`client_ip` from api_invoke_record where id = #{value}
	</select>

	<select id="list" resultType="com.bootdo.system.domain.ApiInvokeRecordDO">
		select `id`,`interface_name`,`url`,`remark`,`invoke_time`,`CLIENT_ID`,`client_ip` from api_invoke_record
        <where>  
		  		  <if test="id != null and id != ''"> and id = #{id} </if>
		  		  <if test="interfaceName != null and interfaceName != ''"> and interface_name = #{interfaceName} </if>
		  		  <if test="url != null and url != ''"> and url = #{url} </if>
		  		  <if test="remark != null and remark != ''"> and remark = #{remark} </if>
		  		  <if test="invokeTime != null and invokeTime != ''"> and invoke_time = #{invokeTime} </if>
		  		  <if test="clientId != null and clientId != ''"> and CLIENT_ID = #{clientId} </if>
		  		  <if test="clientIp != null and clientIp != ''"> and client_ip = #{clientIp} </if>
		  		</where>
        <choose>
            <when test="sort != null and sort.trim() != ''">
                order by ${sort} ${order}
            </when>
			<otherwise>
                order by id desc
			</otherwise>
        </choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>
	
 	<select id="count" resultType="int">
		select count(*) from api_invoke_record
		 <where>  
		  		  <if test="id != null and id != ''"> and id = #{id} </if>
		  		  <if test="interfaceName != null and interfaceName != ''"> and interface_name = #{interfaceName} </if>
		  		  <if test="url != null and url != ''"> and url = #{url} </if>
		  		  <if test="remark != null and remark != ''"> and remark = #{remark} </if>
		  		  <if test="invokeTime != null and invokeTime != ''"> and invoke_time = #{invokeTime} </if>
		  		  <if test="clientId != null and clientId != ''"> and CLIENT_ID = #{clientId} </if>
		  		  <if test="clientIp != null and clientIp != ''"> and client_ip = #{clientIp} </if>
		  		</where>
	</select>
	 
	<insert id="save" parameterType="com.bootdo.system.domain.ApiInvokeRecordDO" useGeneratedKeys="true" keyProperty="id">
		insert into api_invoke_record
		(
			`interface_name`, 
			`url`, 
			`remark`, 
			`invoke_time`, 
			`CLIENT_ID`, 
			`client_ip`
		)
		values
		(
			#{interfaceName}, 
			#{url}, 
			#{remark}, 
			#{invokeTime}, 
			#{clientId}, 
			#{clientIp}
		)
	</insert>
	 
	<update id="update" parameterType="com.bootdo.system.domain.ApiInvokeRecordDO">
		update api_invoke_record 
		<set>
			<if test="interfaceName != null">`interface_name` = #{interfaceName}, </if>
			<if test="url != null">`url` = #{url}, </if>
			<if test="remark != null">`remark` = #{remark}, </if>
			<if test="invokeTime != null">`invoke_time` = #{invokeTime}, </if>
			<if test="clientId != null">`CLIENT_ID` = #{clientId}, </if>
			<if test="clientIp != null">`client_ip` = #{clientIp}</if>
		</set>
		where id = #{id}
	</update>
	
	<delete id="remove">
		delete from api_invoke_record where id = #{value}
	</delete>
	
	<delete id="batchRemove">
		delete from api_invoke_record where id in 
		<foreach item="id" collection="array" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>
</mapper>